<html xmlns:v="urn:schemas-microsoft-com:vml xml:lang="hu" lang="hu""
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-2">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 15">
<meta name=Originator content="Microsoft Word 15">
<link rel=File-List href="PowerShell5_files/filelist.xml">
<link rel=Edit-Time-Data href="PowerShell5_files/editdata.mso">
<link rel=OLE-Object-Data href="PowerShell5_files/oledata.mso">


<title>Összefoglaló: PowerShell programozási stílus</title>


<link rel=dataStoreItem href="PowerShell5_files/item0001.xml"
target="PowerShell5_files/props002.xml">
<link rel=themeData href="PowerShell5_files/themedata.thmx">
<link rel=colorSchemeMapping href="PowerShell5_files/colorschememapping.xml">




<link rel="StyleSheet" href="PowerShell5.css">





</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:35.4pt;word-wrap:
break-word'>

<h2 style='mso-list:l1 level2 lfo1'><span style='mso-bookmark:_Toc197149396'><span
style='mso-bookmark:_Toc197149335'><span style='mso-bookmark:_Toc197149224'><a
name="_Toc204716276"></a><a name="_Toc209115819"><span style='mso-bookmark:
_Toc204716276'>
<span
lang=HU>Összefoglaló: PowerShell programozási stílus</span></span></a></span></span></span></h2>

<p class=Szveg><span lang=HU>Ez elméleti rész lezárásaként összefoglalnám
azokat a főbb jellemzőket, amelyek a PowerShellben történő programozás jellegzetességeinek
érzek:</span></p>

<p class=BulletSzvegCxSpFirst style='mso-list:l7 level1 lfo5'>
<span
lang=HU>Csövezés minden mennyiségben!</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU>Egy-egy művelet eredményét legtöbb esetben felesleges változókba rakni,
érdemes azonnal tovább küldeni további feldolgozásra a csővezetéken keresztül
egy újabb parancs számára. Ezzel nem csak egyszerűbb, tömörebb lesz a programunk,
hanem egy csomó átmeneti adattárolás memória-felhasználását spóroljuk meg.</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU><o:p>&nbsp;</o:p></span></p>

<p class=BulletSzvegCxSpMiddle style='mso-list:l7 level1 lfo5'>
<span
lang=HU>Gyűjtemény vagy objektum?</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU>Mint ahogy a láttuk például a </span><span class=KdInlineChar><span
lang=HU style='mso-bidi-font-family:"Times New Roman"'>get-member</span></span><span
lang=HU> cmdlet működésénél, a PowerShell néha túl „okosan” próbál
gyűjteményeket kezelni, azaz nem mint objektumokat használja, hanem kifejti az
egyes elemeit. Míg ha egy elemet adunk neki, akkor meg azt az adott
objektumként kezeli. Ez gyakran félrevezető, főleg amikor egy objektum
tulajdonságait próbáljuk feltérképezni, és azt hisszük, hogy már egy
indexelhető tömbnél tartunk, és akkor derül ki számunkra, hogy nem, még
mélyebbre kell ásnunk, mert amit látunk az még mindig egy egyetlen elemet
tartalmazó tömbobjektum.</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU><o:p>&nbsp;</o:p></span></p>

<p class=BulletSzvegCxSpMiddle style='mso-list:l7 level1 lfo5'>
<span
lang=HU>Hagyományos „programolós” ciklus helyett bármi más!</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU>Akinek valamilyen klasszikus programnyelvben van gyakorlata, az
PowerShellben is hajlamos eleinte minden többelemű adat feldolgozásakor </span><span
class=KdInlineChar><span lang=HU style='mso-bidi-font-family:"Times New Roman"'>FOR</span></span><span
lang=HU> ciklust írni. De ha nincs szükségünk az elemek ilyen jellegű
indexelésére, nyugodtan használjunk </span><span class=KdInlineChar><span
lang=HU style='mso-bidi-font-family:"Times New Roman"'>FOREACH</span></span><span
lang=HU> ciklust. Ha csővezetéken érkeznek az adatok, akkor meg használjunk </span><span
class=KdInlineChar><span lang=HU style='mso-bidi-font-family:"Times New Roman"'>ForEach-Object</span></span><span
lang=HU> cmdletet. Sőt, mint ahogy az „Exchange 12 Rocks” példámban szerepelt (</span>
<span lang=HU>1.3.13
</span>
<span lang=HU> </span>
<span lang=HU>Típuskonverzió
</span>
<span lang=HU> fejezet),
a típuskonverzió is kiválthat sok esetben ciklust, illetve még a </span><span
class=KdInlineChar><span lang=HU style='mso-bidi-font-family:"Times New Roman"'>SWITCH</span></span><span
lang=HU> kifejezés is használható ciklusként. </span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU><o:p>&nbsp;</o:p></span></p>

<p class=BulletSzvegCxSpMiddle style='mso-list:l7 level1 lfo5'>
<span
lang=HU>Minden objektum!</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU>Soha ne feledkezzünk meg arról, hogy a PowerShellben minden kimenet
objektum. Ugyan a konzolon szövegeket, karaktereket látunk, de ezek az esetek
túlnyomó többségében nem egyszerű szövegek, hanem összetett objektumok,
melyeknek csak néhány tulajdonságát látjuk a képernyőn szövegként. Ráadásul
ezek a tulajdonságok is általában szintén objektumok. Ne legyünk restek ezeknek
a mélyére ásni. Ebben segít bennünket a </span><span class=KdInlineChar><span
lang=HU style='mso-bidi-font-family:"Times New Roman"'>get-member</span></span><span
lang=HU> cmdlet, a különböző szkriptszerkesztők (mint például a PowerGUI Script
Editora) és a Reflector segédprogram, valamint az MSDN weboldal. Nézzünk utána
a tulajdonságoknak, metódusoknak, konstruktoroknak, statikus metódusoknak,
nehogy leprogramozzunk valami olyasmit, ami már készen megtalálható az objektum
jellemzői között vagy a .NET keretrendszer valamelyik osztályában.</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU><o:p>&nbsp;</o:p></span></p>

<p class=BulletSzvegCxSpMiddle style='mso-list:l7 level1 lfo5'>
<span
lang=HU>Szabjuk testre a PowerShellt, de ez ne menjen a kompatibilitás kárára</span></p>

<p class=BulletSzvegCxSpMiddle style='text-indent:0cm;mso-list:none'><span
lang=HU>Ugyan a 2.0-ás verzióval a PowerShellnek egyre kevesebb hiányossága van,
de ha mégis szeretnénk valamivel kibővíteni, akkor azt nagyon egyszerűen megtehetjük.
Újabb függvényekkel új funkciókat valósíthatunk meg. Új álnevekkel kevesebbet
kell gépelnünk. A típusok kiegészítésével újabb tulajdonságokat és metódusokat
készíthetünk objektumainkhoz. Modulokkal újabb funkció-halmazokat tudunk egy
egységként kezelni és hordozni gépek között. </span></p>

<p class=BulletSzvegCxSpLast style='text-indent:0cm;mso-list:none'><span
lang=HU>A beépített cmdleteket, álneveket lehetőleg ne definiáljuk újra, mert
ez a programjaink, parancssoraink értelmezhetőségének kárára megy.</span></p>

<div style='mso-element:para-border-div;border:none;border-bottom:ridge windowtext 9.0pt;
mso-border-bottom-alt:three-d-emboss windowtext 9.0pt;padding:0cm 0cm 1.0pt 0cm'>

<P><P><BR><BR><P class=MsoNormal style="text-align:center;font-size:10"><a href="http://www.technoriversoft.com/wordtohtmlconversion.html">Word To HTML Converter</a>

</body>

</html>
